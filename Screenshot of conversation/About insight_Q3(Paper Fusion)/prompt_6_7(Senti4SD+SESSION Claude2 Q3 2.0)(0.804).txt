Q:According to the given papers, why should we distinguish between technical descriptive text and sentiment expressive text when analyzing sentiment for software engineering texts? Please answer within 100 words.
A：Here is a 97-word summary:
When analyzing sentiment for software engineering texts, it is important to distinguish between technical descriptive text and sentiment expressive text. Software engineering texts often contain technical details or problem descriptions that use negative vocabulary but do not actually express sentiment. Off-the-shelf sentiment analysis tools can misclassify these neutral technical texts as negative. By using sentence structure heuristics to filter out technical descriptive clauses and better identify where sentiment is directly expressed, the proposed SESSION approach is able to reduce this negative classification bias and improve performance over baseline tools like SentiStrength that were trained on more straightforward social media text.


Q:According to the given papers, how to distinguish between technical descriptive text and sentiment expressive text when analyzing sentiment for software engineering texts? Please answer within 200 words.
A：Here is a 197-word answer on distinguishing between technical descriptive text and sentiment expressive text when analyzing sentiment in software engineering texts:
Software engineering texts frequently contain both technical details/descriptions as well as expressions of sentiment. However, off-the-shelf sentiment analysis tools often misclassify neutral technical text as negative, since terms like "error," "failure," "bug," etc. are seen as carrying negative sentiment in domains like social media.
The key is to leverage cues from sentence structure and word usage to better distinguish truly sentiment expressive text from technical descriptive text:
Sentiment expressive text tends to use more emotive punctuation (exclamation points, emoji), sentiment-loaded terms (especially adverbs/adjectives), judgement words, and first-person perspective.
Technical descriptive text is more likely to contain software engineering vocabulary, problem descriptions, neutral reporting of issues/errors, hypotheticals/conditionals, quoted examples, and third-person objective language.
By defining filter rules that flag sentences containing the above sentiment expressive cues for sentiment analysis while filtering out technical clauses, the proposed SESSION approach is able to reduce negative classification bias. This allows it to outperform tools like SentiStrength that fail to make this distinction between technical description and emotional expression in the software engineering domain. The key is leveraging the unique structure and language of software engineering texts.