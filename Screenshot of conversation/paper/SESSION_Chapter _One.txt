I.	INTRODUCTION 
Sentiment analysis is the study of the subjectivity and polarity of a manually-written text (usually identified as positive, neutral, or negative) [1]. Modern software development process relies on a large number of manual efforts and collaborations because the scale of software is significantly larger and software development has become much more iterative [2]. Thus, the key performance indicators of software development, such as its quality, productivity, creativity, etc., will be inevitably affected by its participators’ sentiments due to their indivisibility of human nature [3]. Meanwhile, the intense human collaborations of current software development are largely supported by different kinds of online tools, such as forums, communities, software repositories, and issue tracking tools. These tools then record abundant manually-written texts about the development process in the domain of software engineering (SE). These SE texts provides a valuable perspective for researchers to detect the developers’ satisfaction or difficulties about the project, i.e., their positive or negative sentiments. Thus, to better support software engineering (e.g., [22]) and program comprehension (e.g., [25]) tasks, a growing body of work [19-28] applies automated sentiment analysis on SE texts from different online tools such as app stores [34-35], Stack Overflow [4, 32, 36], GitHub [29-31], and JIRA [21, 22]. These analyses are also favorable in daily SE practice because unlike the traditional approaches [5, 6, 42], they do not need direct observations or interactions on the developers, thus not likely to hinder them from their assigned development tasks.
When analyzing SE texts, the majority of the discussed work uses off-the-shelf sentiment analysis tools built on texts that are irrelevant to the SE domain, such as movie comments [7], or posts from typical social network such as Myspace [11]. To improve the performance of sentiment analysis in the SE domain, researchers further customized automated tools for SE texts by either training the particularly collected and labeled SE texts [13, 36], or building a SE-specified dictionary (e.g., mark “failure” and “exception” as neutral in SE text) [12]. Unfortunately, when analyzing the sentiments on Stack Overflow discussions to help recommend code libraries to developers, Lin et al. [36] found that no current sentiment analysis tools, even including two SE-customized tools (i.e., the domain-dictionary-based tool named SentiStrength-SE [12], and the adapted learning-based tool trained on the authors’ labeled dataset from Stack Overflow), can provide reliable results of developers’ sentiments in the SE texts. The reported negative results not only warn researchers about the limitations of current sentiment analysis on SE texts but also require them to further discover how developers express their sentiments in the SE texts from online collaborative tools.
In this regard, we made a close observation and found that the expression of sentiments in SE texts are more indirect and dispersed compared to the way in the texts of common social media (referred to as social texts in this paper). Specifically, we first observed that the author of an SE text often has to describe the issues that she encountered or proposed in detail before or after she expresses her sentiments, due to the overall complicacy of software tasks (such as bug fixing or comprehending code and features). Therefore, instead of assuming the entire SE text (with one or more sentences) as sentimental, SE-specified sentiment analysis needs to ignore clauses that are not likely to express sentiments in all sentences. We then observed that due to the more complicated writing, the sentence structures become very helpful to better understand the sentiments in SE texts, e.g., to ignore subjunctive clauses or to distinguish polysemous words.
Based on the observations, we proposed a dictionary-based approach that uses sentence structures to improve sentiment analysis on SE texts. We build our approach based on the state-of-the-art dictionary-based tool (i.e., SentiStrength [11]) instead of retraining because: (1) we can integrate our heuristics into the dictionary-based tool naturally based on our observations, and explicitly test their effects; (2) more importantly, the dictionary-based approach tends to have better generalizability on different kinds of SE texts without requiring a large amount of labeled data for training, and thus we can use four different datasets to better evaluate our observations and proposed approach. In particular, our approach consists of three major steps: (1) it preprocesses and segments a given SE text into clauses; (2) it ignores the clauses that are not likely to express sentiments according to our proposed filter rules based on the sentence structures of the SE text; (3) when identifying sentiments on the possibly sentimental clauses, our approach further uses proposed adjust rules to enhance the results of dictionary-based sentiment analysis. We evaluated our approach with the antecedent observations on four datasets that are collected from three online collaborative tools for software development: Stack Overflow, app reviews, and JIRA. The evaluation showed that our approach can substantially outperform two dictionary-based baseline approaches [7, 12] and our filter-adjust rules have a strong complementary effect to the two baselines. This result also showed that our observations, which are the basis of our proposed filter-adjust rules, are valid because they can help SentiStrength, the state-of-the-art dictionary-based tool of sentiment analysis, to achieve better performance on SE texts without modifying its dictionary of sentimental words. The evaluation also showed that our approach has a better generalizability on all four datasets than a learning-based baseline approach [13] that is trained on one dataset only. 
This paper aims to improve sentiment analysis for software engineering by characterizing the unique way of expression in SE texts based on sentence structures. We name our approach as SESSION (SentEnce-Structure-based SentIment analysis for sOftware eNgineering). This paper makes two contributions: (1) we observe and find the uniqueness of sentiment expression in SE texts; (2) we improve the accuracy of dictionary-based sentiment analysis on SE texts based on our heuristics elicited from antecedent observations by using sentence structures of the SE texts. Our tool is publicly available [43].
The rest of this paper is structured as follows. Section II introduces the background of dictionary-based sentiment analysis and our observations on sentiment expression in SE texts. Section III presents our approach. Section IV introduces the experiment and research questions. Section V answers the research questions based on the experiment results. Section VI discusses possible threats. Section VII discusses related work. Section VIII makes conclusions and refers to future work. 